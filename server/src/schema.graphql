# import Post from "./generated/prisma.graphql"

type User {
  id: ID!
  level: USER_LEVEL!
  firstName: String!
  lastName: String!
  email: String!
  avatarURL: String
  followers: [User!]!
  follows: [User!]!
  channels: [Channel!]!
  messages: [Message!]!
  postLikes: [PostLike!]!
  postBookmarks: [PostBookmark!]!
 }

type AuthPayload {
  token: String
  user: User
}

type S3Payload {
  signedRequest: String!
  url: String!
}

type Query {
  postFeed(filter: String, skip: Int, first: Int): [Post!]!
  postsConnection(filter: String, after: String, first: Int, orderBy: PostOrderByInput): PostConnection
  usersConnection(filter: String, after: String, first: Int, orderBy: UserOrderByInput): UserConnection
  post(id: ID!): Post
  gigFeed(filter: String, skip: Int, first: Int): [Gig!]!
  gig(id: String!): Gig
  gigsConnection(filter: String, after: String, first: Int, orderBy: GigOrderByInput, lat: Float, lng: Float, distance: Int, postedById: String,): GigConnection
  users(filter: String, skip: Int, first: Int): [User!]!
  user(id: ID!): User
  me: User
  channels(filter: String, skip: Int, first: Int): [Channel!]!
  channelsConnection(filter: String, after: String, first: Int, orderBy: ChannelOrderByInput, id: String): ChannelConnection
  messages(id: ID): [Message]!
  messagesConnection(filter: String, before: String, last: Int, orderBy: MessageOrderByInput, id: String, channelId: String): MessageConnection
}

type Mutation {
  createPost(title: String!, text: String, pictureURL: String): Post
  deletePost(id: ID!): Post
  likePost(id: ID!): PostLike
  unlikePost(id: ID!): PostLike
  bookmarkPost(id: ID!): PostBookmark
  unbookmarkPost(id: ID!): PostBookmark
  createPostComment(id: ID!, text: String!): PostComment
  deletePostComment(id: ID!): PostComment
  createGig(title: String!, text: String!, type: GIG_TYPE!, startDateTime: DateTime, endDateTime: DateTime, addressName: String, lat: Float, lng: Float, address: String, directions: String): Gig
  updateGig(id: String!, title: String, text: String, type: GIG_TYPE, startDateTime: DateTime, endDateTime: DateTime, locationId: String, addressName: String, lat: Float, lng: Float, address: String, directions: String): Gig
  deleteGig(id: ID!): Gig
  createLocation(name: String!, lat: Float!, lng: Float!, address: String!, directions: String, gigId: ID!): Location
  deleteLocation(id: ID!): Location
  signup(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  deleteUser(email: String!): User
  changePassword(currPassword: String!, newPassword: String!): User
  follow(id: ID!): User
  unfollow(id: ID!): User
  updateMe(firstName:String, lastName: String, avatarURL: String): User
  signS3(filename: String!, filetype: String!): S3Payload!
  createMessage(id: String!, text: String!): Message
  deleteChannel(id: ID!): Channel
  deleteMessage(id: ID!): Message
}