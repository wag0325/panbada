# import Post from "./generated/prisma.graphql"

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  avatarURL: String
  followers: [User!]!
  follows: [User!]!
 }

type AuthPayload {
  token: String
  user: User
}

type S3Payload {
  signedRequest: String!
  url: String!
}

type Query {
  postFeed(filter: String, skip: Int, first: Int): [Post!]!
  postsConnection(filter: String, after: String, first: Int, orderBy: PostOrderByInput): PostConnection
  usersConnection(filter: String, after: String, first: Int, orderBy: UserOrderByInput): UserConnection
  post(id: ID!): Post
  gigFeed(filter: String, skip: Int, first: Int): [Gig!]!
  gig(gigId: ID!): Gig
  users(filter: String, skip: Int, first: Int): [User!]!
  user(id: ID!): User
  me: User
  channels(filter: String, skip: Int, first: Int): [Channel!]!
}

type Mutation {
  createPost(title: String!, text: String, pictureURL: String): Post
  deletePost(id: ID!): Post
  likePost(id: ID!): PostLike
  unlikePost(id: ID!): PostLike
  createPostComment(id: ID!, text: String!): PostComment
  deletePostComment(id: ID!): PostComment
  createGig(title: String!, text: String!, type: String!): Gig
  deleteGig(id: ID!): Gig
  signup(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  follow(id: ID!): User
  unfollow(id: ID!): User
  signS3(filename: String!, filetype: String!): S3Payload!
  createMessage(id: ID!, text: String!): Message
  deleteChannel(id: ID!): Channel
  deleteMessage(id: ID!): Message
}